<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris Game</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
            background-color: black;
            color: white;
        }
        #gameContainer {
            display: inline-block;
            margin-top: 50px;
        }
        #stage, #next {
            background-color: #111;
            border: 2px solid white;
        }
        .control-button {
            display: inline-block;
            margin: 5px;
            padding: 10px;
            background-color: grey;
            color: white;
            cursor: pointer;
        }
        .control-button:hover {
            background-color: lightgrey;
        }
    </style>
</head>
<body>
    <h1>Tetris Game</h1>
    <div id="gameContainer">
        <canvas id="stage" width="300" height="600"></canvas>
        <canvas id="next" width="100" height="100"></canvas>
        <div>
            <div class="control-button" id="tetris-move-left-button">Left</div>
            <div class="control-button" id="tetris-rotate-button">Rotate</div>
            <div class="control-button" id="tetris-move-right-button">Right</div>
            <div class="control-button" id="tetris-soft-drop-button">Soft Drop</div>
            <div class="control-button" id="tetris-hard-drop-button">Hard Drop</div>
        </div>
        <div>
            <p>Lines Deleted: <span id="lines">0</span></p>
            <p>Score: <span id="score">0</span></p>
            <p id="message"></p>
        </div>
    </div>

    <script>
    class Tetris {
        constructor() {
            this.stageWidth = 10;
            this.stageHeight = 20;
            this.stageCanvas = document.getElementById("stage");
            this.nextCanvas = document.getElementById("next");
            this.cellSize = Math.min(this.stageCanvas.width / this.stageWidth, this.stageCanvas.height / this.stageHeight);
            this.stageLeftPadding = (this.stageCanvas.width - this.cellSize * this.stageWidth) / 2;
            this.stageTopPadding = (this.stageCanvas.height - this.cellSize * this.stageHeight) / 2;
            this.blocks = this.createBlocks();
            this.deletedLines = 0;
            this.score = 0;
            this.combo = 0;
            this.chaosMode = false;
            this.chaosSpeed = 500;
            this.isGameOver = false;
            this.setupEventListeners();
            this.startGame();
        }

        createBlocks() {
            return [
                // I-block
                {
                    shape: [[[-1, 0], [0, 0], [1, 0], [2, 0]],
                            [[0, -1], [0, 0], [0, 1], [0, 2]],
                            [[-1, 0], [0, 0], [1, 0], [2, 0]],
                            [[0, -1], [0, 0], [0, 1], [0, 2]]],
                    color: "rgb(0, 255, 255)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(0, 128, 128)"
                },
                // O-block
                {
                    shape: [[[0, 0], [1, 0], [0, 1], [1, 1]],
                            [[0, 0], [1, 0], [0, 1], [1, 1]],
                            [[0, 0], [1, 0], [0, 1], [1, 1]],
                            [[0, 0], [1, 0], [0, 1], [1, 1]]],
                    color: "rgb(255, 255, 0)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(128, 128, 0)"
                },
                // T-block
                {
                    shape: [[[0, 0], [1, 0], [-1, 1], [0, 1]],
                            [[-1, -1], [-1, 0], [0, 0], [0, 1]],
                            [[0, 0], [1, 0], [-1, 1], [0, 1]],
                            [[-1, -1], [-1, 0], [0, 0], [0, 1]]],
                    color: "rgb(0, 255, 0)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(0, 128, 0)"
                },
                // S-block
                {
                    shape: [[[-1, 0], [0, 0], [0, 1], [1, 1]],
                            [[0, -1], [-1, 0], [0, 0], [-1, 1]],
                            [[-1, 0], [0, 0], [0, 1], [1, 1]],
                            [[0, -1], [-1, 0], [0, 0], [-1, 1]]],
                    color: "rgb(255, 0, 0)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(128, 0, 0)"
                },
                // Z-block
                {
                    shape: [[[-1, -1], [-1, 0], [0, 0], [1, 0]],
                            [[0, -1], [1, -1], [0, 0], [0, 1]],
                            [[-1, 0], [0, 0], [1, 0], [1, 1]],
                            [[0, -1], [0, 0], [-1, 1], [0, 1]]],
                    color: "rgb(0, 0, 255)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(0, 0, 128)"
                },
                // J-block
                {
                    shape: [[[1, -1], [-1, 0], [0, 0], [1, 0]],
                            [[0, -1], [0, 0], [0, 1], [1, 1]],
                            [[-1, 0], [0, 0], [1, 0], [-1, 1]],
                            [[-1, -1], [0, -1], [0, 0], [0, 1]]],
                    color: "rgb(255, 165, 0)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(128, 82, 0)"
                },
                // L-block
                {
                    shape: [[[0, -1], [-1, 0], [0, 0], [1, 0]],
                            [[0, -1], [0, 0], [1, 0], [0, 1]],
                            [[-1, 0], [0, 0], [1, 0], [0, 1]],
                            [[0, -1], [-1, 0], [0, 0], [0, 1]]],
                    color: "rgb(255, 0, 255)",
                    highlight: "rgb(255, 255, 255)",
                    shadow: "rgb(128, 0, 128)"
                }
            ];
        }

        setupEventListeners() {
            document.getElementById("tetris-move-left-button").onclick = () => this.moveLeft();
            document.getElementById("tetris-rotate-button").onclick = () => this.rotate();
            document.getElementById("tetris-move-right-button").onclick = () => this.moveRight();
            document.getElementById("tetris-soft-drop-button").onclick = () => this.softDrop();
            document.getElementById("tetris-hard-drop-button").onclick = () => this.hardDrop();

            document.onkeydown = (e) => {
                if (this.isGameOver) return;
                if (e.keyCode === 37) { // Left Arrow
                    this.moveLeft();
                } else if (e.keyCode === 38) { // Up Arrow
                    this.rotate();
                } else if (e.keyCode === 39) { // Right Arrow
                    this.moveRight();
                } else if (e.keyCode === 40) { // Down Arrow
                    this.softDrop();
                } else if (e.keyCode === 32) { // Spacebar
                    this.hardDrop();
                } else if (e.keyCode === 67) { // 'C' key
                    this.triggerChaosMode();
                }
            };
        }

        startGame() {
            this.virtualStage = Array.from({ length: this.stageWidth }, () => Array(this.stageHeight).fill(null));
            this.currentBlock = this.getRandomBlock();
            this.nextBlock = this.getRandomBlock();
            this.updateNextBlockCanvas();
            this.updateStageCanvas();
            this.isGameOver = false;
            this.deletedLines = 0;
            this.score = 0;
            this.combo = 0;
            this.chaosSpeed = 500;
            document.getElementById("lines").textContent = this.deletedLines;
            document.getElementById("score").textContent = this.score;
            document.getElementById("message").textContent = '';
            this.gameLoop();
        }

        gameLoop() {
            if (this.isGameOver) return;
            this.moveDown();
            const speed = this.chaosMode ? this.chaosSpeed : 500;
            setTimeout(() => this.gameLoop(), speed); // Adjust the speed as needed
        }

        updateStageCanvas() {
            const ctx = this.stageCanvas.getContext("2d");
            ctx.clearRect(0, 0, this.stageCanvas.width, this.stageCanvas.height);

            for (let x = 0; x < this.stageWidth; x++) {
                for (let y = 0; y < this.stageHeight; y++) {
                    if (this.virtualStage[x][y]) {
                        this.drawBlock(ctx, x, y, this.virtualStage[x][y]);
                    }
                }
            }

            if (this.currentBlock) {
                this.currentBlock.shape[this.currentBlock.rotation].forEach(([bx, by]) => {
                    this.drawBlock(ctx, this.currentBlock.x + bx, this.currentBlock.y + by, this.currentBlock.color);
                });
            }
        }

        drawBlock(ctx, x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(
                this.stageLeftPadding + x * this.cellSize,
                this.stageTopPadding + y * this.cellSize,
                this.cellSize,
                this.cellSize
            );
        }

        updateNextBlockCanvas() {
            const ctx = this.nextCanvas.getContext("2d");
            ctx.clearRect(0, 0, this.nextCanvas.width, this.nextCanvas.height);

            this.nextBlock.shape[0].forEach(([bx, by]) => {
                ctx.fillStyle = this.nextBlock.color;
                ctx.fillRect(
                    bx * 20,
                    by * 20,
                    20,
                    20
                );
            });
        }

        getRandomBlock() {
            const block = this.blocks[Math.floor(Math.random() * this.blocks.length)];
            return {
                ...block,
                x: Math.floor(this.stageWidth / 2) - 1,
                y: 0,
                rotation: 0
            };
        }

        moveLeft() {
            if (this.currentBlock) {
                this.currentBlock.x--;
                if (this.collides()) this.currentBlock.x++;
                this.updateStageCanvas();
            }
        }

        moveRight() {
            if (this.currentBlock) {
                this.currentBlock.x++;
                if (this.collides()) this.currentBlock.x--;
                this.updateStageCanvas();
            }
        }

        rotate() {
            if (this.currentBlock) {
                this.currentBlock.rotation = (this.currentBlock.rotation + 1) % 4;
                if (this.collides()) this.currentBlock.rotation = (this.currentBlock.rotation + 3) % 4;
                this.updateStageCanvas();
            }
        }

        moveDown() {
            if (this.currentBlock) {
                this.currentBlock.y++;
                if (this.collides()) {
                    this.currentBlock.y--;
                    this.lockBlock();
                    this.clearLines();
                    this.currentBlock = this.nextBlock;
                    this.nextBlock = this.getRandomBlock();
                    this.updateNextBlockCanvas();
                    this.updateStageCanvas();
                    if (this.collides()) {
                        this.isGameOver = true;
                        document.getElementById("message").textContent = "Game Over!";
                        return;
                    }
                    if (this.chaosMode) {
                        this.chaosSpeed = Math.max(100, this.chaosSpeed - 15);
                    }
                }
                this.updateStageCanvas();
            }
        }

        softDrop() {
            if (this.currentBlock) {
                this.currentBlock.y++;
                if (this.collides()) {
                    this.currentBlock.y--;
                }
                this.updateStageCanvas();
            }
        }

        hardDrop() {
            if (this.currentBlock) {
                while (!this.collides()) {
                    this.currentBlock.y++;
                }
                this.currentBlock.y--;
                this.lockBlock();
                this.clearLines();
                this.currentBlock = this.nextBlock;
                this.nextBlock = this.getRandomBlock();
                this.updateNextBlockCanvas();
                this.updateStageCanvas();
                if (this.collides()) {
                    this.isGameOver = true;
                    document.getElementById("message").textContent = "Game Over!";
                    return;
                }
                if (this.chaosMode) {
                    this.chaosSpeed = Math.max(100, this.chaosSpeed - 10);
                }
            }
        }

        collides() {
            return this.currentBlock.shape[this.currentBlock.rotation].some(([bx, by]) => {
                const x = this.currentBlock.x + bx;
                const y = this.currentBlock.y + by;
                return x < 0 || x >= this.stageWidth || y >= this.stageHeight || this.virtualStage[x][y];
            });
        }

        lockBlock() {
            this.currentBlock.shape[this.currentBlock.rotation].forEach(([bx, by]) => {
                this.virtualStage[this.currentBlock.x + bx][this.currentBlock.y + by] = this.currentBlock.color;
            });
        }

        clearLines() {
            let linesCleared = 0;
            for (let y = this.stageHeight - 1; y >= 0; y--) {
                if (this.virtualStage.every(col => col[y])) {
                    this.virtualStage.forEach(col => col.splice(y, 1));
                    this.virtualStage.forEach(col => col.unshift(null));
                    linesCleared++;
                    this.deletedLines++;
                    document.getElementById("lines").textContent = this.deletedLines;
                    y++;
                }
            }
            if (linesCleared > 0) {
                this.score += linesCleared * 100 * (this.combo + 1);
                this.combo++;
                document.getElementById("score").textContent = this.score;
                document.getElementById("message").textContent = `+${linesCleared * 100 * (this.combo)} Points!`;
                setTimeout(() => { document.getElementById("message").textContent = ''; }, 2000);
            } else {
                this.combo = 0;
            }
        }

        triggerChaosMode() {
            this.chaosMode = !this.chaosMode;
            this.chaosSpeed = 500;
            document.getElementById("message").textContent = this.chaosMode ? "Chaos Mode Activated!" : "Chaos Mode Deactivated!";
            setTimeout(() => { document.getElementById("message").textContent = ''; }, 2000);
        }
    }

    new Tetris();
    </script>
</body>
</html>
